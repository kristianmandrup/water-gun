{"version":3,"sources":["channel/csp.js"],"names":["$csp","addCsp","csp","require","node","opts","id","channel","buffer","name","condition","op","putOp","bufferSize","bufferType","size","type","buffers","defaultChannel","chan","val","soul","data","log","args","defaultPutCb","event","putCb","defaultCondition","eventListener","lastValue","value","chain"],"mappings":";;;;;;;;;;QAagBA,I,GAAAA,I;QAmEAC,M,GAAAA,M;;AAhFhB;;;;AAEA;;;;AAMA,IAAMC,MAAMC,QAAQ,QAAR,CAAZ;;AAEA;;AAEA;;AAXA;AAYO,SAASH,IAAT,CAAcI,IAAd,EAA+B;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AACpC,MAAIC,WAAJ;;AADoC,MAIlCC,OAJkC,GAUhCF,IAVgC,CAIlCE,OAJkC;AAAA,MAKlCC,MALkC,GAUhCH,IAVgC,CAKlCG,MALkC;AAAA,MAMlCC,IANkC,GAUhCJ,IAVgC,CAMlCI,IANkC;AAAA,MAOlCC,SAPkC,GAUhCL,IAVgC,CAOlCK,SAPkC;AAAA,iBAUhCL,IAVgC,CAQlCM,EARkC;AAAA,MAQlCA,EARkC,4BAQ7B,IAR6B;AAAA,oBAUhCN,IAVgC,CASlCO,KATkC;AAAA,MASlCA,KATkC,+BAS1B,KAT0B;;;AAYpC,MAAIC,aAAa,CAAjB;AACA,MAAIC,aAAa,OAAjB;;AAEA,MAAIN,MAAJ,EAAY;AACVK,iBAAaL,OAAOO,IAAP,IAAeF,UAA5B;AACAC,iBAAaN,OAAOQ,IAAP,IAAeF,UAA5B;AACD;;AAEDN,WAASA,UAAUN,IAAIe,OAAJ,CAAYH,UAAZ,EAAwBD,UAAxB,CAAnB;;AAEA,MAAIK,iBAAiB,SAAjBA,cAAiB,CAACV,MAAD;AAAA,WAAYN,IAAIiB,IAAJ,CAASX,MAAT,CAAZ;AAAA,GAArB;;AAEAD,YAAUA,WAAWW,eAAeV,MAAf,CAArB;;AAEAJ,OAAKgB,GAAL,CAAS,gBAAQ;AACfd,SAAK,cAAIF,IAAJ,CAASiB,IAAT,CAAcC,IAAd,CAAL;AACAb,WAAOA,QAAQH,EAAR,IAAc,SAArB;AACD,GAHD;;AAKA,MAAMiB,MAAM,SAANA,GAAM,GAAmB;AAC7B,QAAIlB,KAAKkB,GAAT,EAAc;AAAA;;AAAA,wCADSC,IACT;AADSA,YACT;AAAA;;AACZ,2BAAQD,GAAR,kBAAY,KAAZ,EAAmBd,IAAnB,SAA4Be,IAA5B;AACD;AACF,GAJD;;AAMA,MAAIC,eAAe,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC5BH,QAAI,6BAAJ;AACD,GAFD;AAGA,MAAII,QAAQtB,KAAKsB,KAAL,IAAcF,YAA1B;;AAEA,MAAIG,mBAAmB,SAAnBA,gBAAmB;AAAA,WAAM,IAAN;AAAA,GAAvB;AACAlB,cAAYA,aAAakB,gBAAzB;;AAEA,MAAIC,gBAAgB,SAAhBA,aAAgB,CAAUH,KAAV,EAAiB;AACnC,QAAIhB,UAAUgB,KAAV,CAAJ,EAAsB;AACpBH,UAAI,aAAJ,EAAmBG,KAAnB;AACA,gDAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACKxB,IAAIU,KAAJ,EAAWL,OAAX,EAAoBmB,KAApB,EAA2BC,KAA3B,CADL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;AAGD;AACF,GAPD;;AASA,MAAIG,kBAAJ;AACA1B,OAAKO,EAAL,EAAS,UAACoB,KAAD,EAAW;AAClB,QAAIA,UAAUD,SAAd,EAAyB;AACvBP,UAAIZ,EAAJ,EAAQ,KAAR,EAAeoB,KAAf;AACAF,oBAAcE,KAAd;AACD,KAHD,MAGO;AACLR,UAAI,GAAJ;AACD;AACF,GAPD;;AASA,SAAOhB,OAAP;AACD;;AAEM,SAASN,MAAT,OAEJ;AAAA,MADD+B,KACC,QADDA,KACC;;AACDA,QAAMhC,IAAN,GAAa,UAAUK,IAAV,EAAgB;AAC3B,WAAOL,KAAK,IAAL,EAAWK,IAAX,CAAP;AACD,GAFD;AAGA,SAAO2B,KAAP;AACD","file":"csp.js","sourcesContent":["import Gun from 'gun/gun';\n// import csp from 'js-csp'\nimport {\n  go\n  // put,\n  // putAsync\n} from 'js-csp'\n\nconst csp = require('js-csp')\n\n// See https://github.com/ubolonton/js-csp/blob/master/doc/basic.md\n\n// See https://github.com/staltz/xstream\nexport function $csp(node, opts = {}) {\n  let id\n\n  let {\n    channel,\n    buffer,\n    name,\n    condition,\n    op = 'on',\n    putOp = 'put'\n  } = opts\n\n  let bufferSize = 2\n  let bufferType = 'fixed'\n\n  if (buffer) {\n    bufferSize = buffer.size || bufferSize\n    bufferType = buffer.type || bufferType\n  }\n\n  buffer = buffer || csp.buffers[bufferType](bufferSize)\n\n  let defaultChannel = (buffer) => csp.chan(buffer)\n\n  channel = channel || defaultChannel(buffer)\n\n  node.val(data => {\n    id = Gun.node.soul(data)\n    name = name || id || 'unknown'\n  })\n\n  const log = function (...args) {\n    if (opts.log) {\n      console.log('rx:', name, ...args)\n    }\n  }\n\n  let defaultPutCb = (event) => {\n    log('event was put on channel :)')\n  }\n  let putCb = opts.putCb || defaultPutCb\n\n  let defaultCondition = () => true\n  condition = condition || defaultCondition\n\n  let eventListener = function (event) {\n    if (condition(event)) {\n      log('Channel PUT', event)\n      go(function* () {\n        yield csp[putOp](channel, event, putCb)\n      })\n    }\n  }\n\n  let lastValue\n  node[op]((value) => {\n    if (value !== lastValue) {\n      log(op, 'new', value)\n      eventListener(value)\n    } else {\n      log('.')\n    }\n  });\n\n  return channel\n}\n\nexport function addCsp({\n  chain\n}) {\n  chain.$csp = function (opts) {\n    return $csp(this, opts)\n  }\n  return chain\n}"]}