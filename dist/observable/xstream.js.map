{"version":3,"sources":["observable/xstream.js"],"names":["$xstream","addXStream","node","opts","id","name","val","Gun","soul","data","op","log","args","producer","start","listener","eventListener","event","next","Error","stop","create","chain"],"mappings":";;;;;QAIgBA,Q,GAAAA,Q;QAmCAC,U,GAAAA,U;;AAvChB;;;;;;AAGA;AACO,SAASD,QAAT,CAAkBE,IAAlB,EAAmC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AACxC,MAAIC,WAAJ;AAAA,MAAQC,aAAR;AACAH,OAAKI,GAAL,CAAS,gBAAQ;AACfF,SAAKG,IAAIL,IAAJ,CAASM,IAAT,CAAcC,IAAd,CAAL;AACAJ,WAAOF,KAAKE,IAAL,IAAaD,EAAb,IAAmB,SAA1B;AACD,GAHD;;AAKA,MAAMM,KAAKP,KAAKO,EAAL,IAAW,IAAtB;AACA,MAAMC,MAAM,SAANA,GAAM,GAAmB;AAC7B,QAAIR,KAAKQ,GAAT,EAAc;AAAA;;AAAA,wCADSC,IACT;AADSA,YACT;AAAA;;AACZ,2BAAQD,GAAR,kBAAY,UAAZ,EAAwBN,IAAxB,SAAiCO,IAAjC;AACD;AACF,GAJD;;AAMA;;AAEA,MAAMC,WAAW;AACfC,WAAO,eAACC,QAAD,EAAc;AACnBJ,UAAI,OAAJ;AACA,UAAIK,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC7B,YAAIF,SAASG,IAAb,EAAmB;AACjBP,cAAI,OAAJ,EAAaM,KAAb;AACAF,mBAASG,IAAT,CAAcD,KAAd;AACD,SAHD,MAGO;AACL,gBAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;AACF,OAPD;AAQAjB,WAAKQ,EAAL,EAASM,aAAT;AACD,KAZc;AAafI,UAAM,gBAAM,CAAE;AAbC,GAAjB;;AAgBA,SAAO,kBAAGC,MAAH,CAAUR,QAAV,CAAP;AACD;;AAEM,SAASZ,UAAT,OAEJ;AAAA,MADDqB,KACC,QADDA,KACC;;AACDA,QAAMtB,QAAN,GAAiB,UAAUG,IAAV,EAAgB;AAC/B,WAAOH,SAAS,IAAT,EAAeG,IAAf,CAAP;AACD,GAFD;AAGA,SAAOmB,KAAP;AACD","file":"xstream.js","sourcesContent":["import xs from 'xstream';\n\n\n// See https://github.com/staltz/xstream\nexport function $xstream(node, opts = {}) {\n  let id, name\n  node.val(data => {\n    id = Gun.node.soul(data)\n    name = opts.name || id || 'unknown'\n  })\n\n  const op = opts.op || 'on'\n  const log = function (...args) {\n    if (opts.log) {\n      console.log('xstream:', name, ...args)\n    }\n  }\n\n  // see Producer https://github.com/staltz/xstream#producer\n\n  const producer = {\n    start: (listener) => {\n      log('start')\n      let eventListener = (event) => {\n        if (listener.next) {\n          log('event', event)\n          listener.next(event)\n        } else {\n          throw new Error('Listener missing next(event) method')\n        }\n      }\n      node[op](eventListener);\n    },\n    stop: () => {}\n  }\n\n  return xs.create(producer)\n};\n\nexport function addXStream({\n  chain\n}) {\n  chain.$xstream = function (opts) {\n    return $xstream(this, opts)\n  }\n  return chain\n}"]}